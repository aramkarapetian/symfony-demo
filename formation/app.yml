AWSTemplateFormatVersion: '2010-09-09'
Description: Symfony Demo App

Parameters:
  VpcId:
    Type: String
    Default: vpc-067a93d13b158ee71
    Description: The name of the environment to add this service to
  ClusterName:
    Type: String
    Default: ecs
    Description: The name of the environment to add this service to
  PublicListener:
    Type: String
    Default: arn:aws:elasticloadbalancing:eu-west-1:381375271776:listener/app/ecs-services/fef2e259e9d52626/a9aeed5938dfc255
    Description: The name of the environment to add this service to

  EnvironmentName:
    Type: String
    Default: production
    Description: The name of the environment to add this service to
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: 381375271776.dkr.ecr.eu-west-1.amazonaws.com/symfony-demo:v1
    # Default: nginx
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 8000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "*"
    Description: A path on the public load balancer that this service
                 should be connected to. Use * to send all load balancer
                 traffic to this service.
  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.
  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run
  Role:
    Type: String
    Default: ""
    Description: (Optional) An IAM role to give the service's containers if the code within needs to
                 access other AWS resources like S3 buckets, DynamoDB tables, etc

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      # TaskRoleArn:
      #   Fn::If:
      #     - 'HasCustomRole'
      #     - !Ref 'Role'
      #     - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
              Protocol: tcp
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: !Ref 'ServiceName'

  Service:
    Type: AWS::ECS::Service
    # DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster: !Ref ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 50
      HealthyThresholdCount: 2
      Name: !Ref 'ServiceName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 10
      VpcId: !Ref 'VpcId'

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn: !Ref  PublicListener
      Priority: !Ref 'Priority'

  # # Enable autoscaling for this service
  # ScalableTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   DependsOn: Service
  #   Properties:
  #     ServiceNamespace: 'ecs'
  #     ScalableDimension: 'ecs:service:DesiredCount'
  #     ResourceId:
  #       Fn::Join:
  #         - '/'
  #         - - service
  #           - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
  #           - !Ref 'ServiceName'
  #     MinCapacity: 2
  #     MaxCapacity: 10
  #     RoleARN:
  #       Fn::ImportValue: !Sub ${EnvironmentName}:AutoscalingRole

  # Create scaling policies for the service
  # ScaleDownPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   DependsOn: ScalableTarget
  #   Properties:
  #     PolicyName:
  #       Fn::Join:
  #         - '/'
  #         - - scale
  #           - !Ref 'EnvironmentName'
  #           - !Ref 'ServiceName'
  #           - down
  #     PolicyType: StepScaling
  #     ResourceId:
  #       Fn::Join:
  #         - '/'
  #         - - service
  #           - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
  #           - !Ref 'ServiceName'
  #     ScalableDimension: 'ecs:service:DesiredCount'
  #     ServiceNamespace: 'ecs'
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: 'ChangeInCapacity'
  #       StepAdjustments:
  #         - MetricIntervalUpperBound: 0
  #           ScalingAdjustment: -1
  #       MetricAggregationType: 'Average'
  #       Cooldown: 60

  # ScaleUpPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   DependsOn: ScalableTarget
  #   Properties:
  #     PolicyName:
  #       Fn::Join:
  #         - '/'
  #         - - scale
  #           - !Ref 'EnvironmentName'
  #           - !Ref 'ServiceName'
  #           - up
  #     PolicyType: StepScaling
  #     ResourceId:
  #       Fn::Join:
  #         - '/'
  #         - - service
  #           - Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
  #           - !Ref 'ServiceName'
  #     ScalableDimension: 'ecs:service:DesiredCount'
  #     ServiceNamespace: 'ecs'
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: 'ChangeInCapacity'
  #       StepAdjustments:
  #         - MetricIntervalLowerBound: 0
  #           MetricIntervalUpperBound: 15
  #           ScalingAdjustment: 1
  #         - MetricIntervalLowerBound: 15
  #           MetricIntervalUpperBound: 25
  #           ScalingAdjustment: 2
  #         - MetricIntervalLowerBound: 25
  #           ScalingAdjustment: 3
  #       MetricAggregationType: 'Average'
  #       Cooldown: 60

  # # Create alarms to trigger these policies
  # LowCpuUsageAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName:
  #       Fn::Join:
  #         - '-'
  #         - - low-cpu
  #           - !Ref 'EnvironmentName'
  #           - !Ref 'ServiceName'
  #     AlarmDescription:
  #       Fn::Join:
  #         - ' '
  #         - - "Low CPU utilization for service"
  #           - !Ref 'ServiceName'
  #           - "in environment"
  #           - !Ref 'EnvironmentName'
  #     MetricName: CPUUtilization
  #     Namespace: AWS/ECS
  #     Dimensions:
  #       - Name: ServiceName
  #         Value: !Ref 'ServiceName'
  #       - Name: ClusterName
  #         Value:
  #           Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
  #     Statistic: Average
  #     Period: 60
  #     EvaluationPeriods: 1
  #     Threshold: 20
  #     ComparisonOperator: LessThanOrEqualToThreshold
  #     AlarmActions:
  #       - !Ref ScaleDownPolicy

  # HighCpuUsageAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmName:
  #       Fn::Join:
  #         - '-'
  #         - - high-cpu
  #           - !Ref 'EnvironmentName'
  #           - !Ref 'ServiceName'
  #     AlarmDescription:
  #       Fn::Join:
  #         - ' '
  #         - - "High CPU utilization for service"
  #           - !Ref 'ServiceName'
  #           - "in environment"
  #           - !Ref 'EnvironmentName'
  #     MetricName: CPUUtilization
  #     Namespace: AWS/ECS
  #     Dimensions:
  #       - Name: ServiceName
  #         Value: !Ref 'ServiceName'
  #       - Name: ClusterName
  #         Value:
  #           Fn::ImportValue: !Sub ${EnvironmentName}:ClusterName
  #     Statistic: Average
  #     Period: 60
  #     EvaluationPeriods: 1
  #     Threshold: 70
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     AlarmActions:
  #       - !Ref ScaleUpPolicy

# Outputs:
#   ApiEndpoint:
#     Description: Symfony Demo App Endpoint
#     Value: !Join ['', ['http://', !ImportValue 'DomainName', '/']]
#     Export:
#       Name: 'SymfonyDemoAppEndpoint'